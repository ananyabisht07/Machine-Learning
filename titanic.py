# -*- coding: utf-8 -*-
"""Titanic

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yacV3hfvQz3QwOrs1cYjw2-nwQbn-Jga
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import Imputer
from sklearn.preprocessing import LabelEncoder
import re

#Applying data engineering

#extracting train.csv and test.csv in which titanic data is kept
train=pd.read_csv('train.csv')
test=pd.read_csv('test.csv')

#removing or dropping column:Name,Tickets
train = train.drop(['Name'],axis=1)
test= test.drop(['Name'],axis=1)
test= test.drop(['Ticket'],axis=1)
train= train.drop(['Ticket'],axis=1)

#replacing cabin with a new column deck
data=[train,test]
deck={"A": 1,"B": 2,"C": 3,"D": 4,"E": 5,"F": 6,"G": 7,"U": 8}

for datasets in data:
  datasets['Cabin']=datasets['Cabin'].fillna("U0")
  datasets['Deck']=datasets['Cabin'].map(lambda x: re.compile('([a-zA-Z]+)').search(x).group())
  datasets['Deck']=datasets['Deck'].map(deck)
  datasets['Deck']=datasets['Deck'].fillna(0)
  datasets['Deck']=datasets['Deck'].astype(int)
  
#dropping column cabin from train and test data
train=train.drop(['Cabin'],axis=1)
test=test.drop(['Cabin'],axis=1)

#replacing NaN with suitable value that is 'S=Southampton ' in embarked column
train1=[train]
test1=[test]
for datasets in train1:
  datasets['Embarked']=datasets['Embarked'].fillna('S')
  
for datasets in test1:
  datasets['Embarked']=datasets['Embarked'].fillna('S')  


y=test.iloc[:,0:].values
x=train.iloc[:,0:].values


sex=LabelEncoder()
embarked=LabelEncoder()


#converting sex column into int where male=1 and female=0
x[:,3]=sex.fit_transform(x[:,3]) 
y[:,2]=sex.fit_transform(y[:,2]) 

#converting embarked values into integer value where 0=Cherbourg 1=Queenstown and 2=Southampton  
x[:,8]=embarked.fit_transform(x[:,8])
y[:,7]=embarked.fit_transform(y[:,7])


#filling the Nan(empty)  values of Age column with the mean values of ages
imp=Imputer(missing_values='NaN',axis=0,strategy='mean')


impute=imp.fit(x[0:,5:6])

x[:,5:6]=impute.transform(x[:,5:6])





